[문제상황]
2. A고객사 비즈니스 유연성과 성능 관점에서 상품을 관리하기 위한 데이터 모델을 새롭게 설계하고 설계 사유 제시

[요구사항 분석]
프롬프트
A고객사 비즈니스 유연성과 성능 관점에서 상품을 관리하기 위한 데이터 모델에 문제가 있다고 한다. 어떤 게 있는지 예상해서 현상과 원인, 개선방향, 기대효과를 정리해줘.
기대효과는 사용자 편의성, 개발자 개발생산성, 운영자 운영 안정성 측면으로 작성해줘.

--------------

### 현상
1. **데이터 중복 및 불일치**:
   - **현상**: 동일한 데이터가 여러 곳에 중복 저장되어 일관성이 떨어짐.
   - **원인**: 비정규화된 데이터베이스 설계.
2. **성능 저하**:
   - **현상**: 쿼리 실행 시간이 길어지고 시스템 응답 속도가 느려짐.
   - **원인**: 비효율적인 인덱스 사용 및 복잡한 조인 연산.
3. **확장성 부족**:
   - **현상**: 데이터 증가에 따라 시스템 성능이 급격히 저하됨.
   - **원인**: 수평적 확장이 어려운 데이터 모델 구조.
4. **유연성 부족**:
   - **현상**: 비즈니스 요구사항 변경 시 데이터 모델 수정이 어려움.
   - **원인**: 강하게 결합된 테이블 구조 및 스키마.

### 개선방향
1. **데이터 정규화**:
   - 중복 데이터를 제거하고 데이터 일관성을 유지.
2. **효율적인 인덱스 설계**:
   - 자주 사용되는 쿼리에 맞춘 인덱스를 생성하여 성능을 향상.
3. **수평적 확장 지원**:
   - 샤딩(sharding) 및 분산 데이터베이스 구조를 도입하여 확장성 확보.
4. **유연한 스키마 설계**:
   - 비즈니스 요구사항 변화에 유연하게 대응할 수 있는 스키마 설계.

### 기대효과
1. **사용자 편의성**:
   - **데이터 일관성**: 중복 데이터 제거로 사용자에게 일관된 데이터 제공.
   - **빠른 응답 속도**: 최적화된 쿼리와 인덱스로 인해 빠른 데이터 접근 가능.
2. **개발자 개발생산성**:
   - **유지보수 용이성**: 정규화된 데이터 모델로 인해 코드 유지보수가 쉬워짐.
   - **확장성**: 유연한 스키마 설계로 새로운 요구사항에 빠르게 대응 가능.
3. **운영자 운영 안정성**:
   - **성능 안정성**: 효율적인 인덱스와 샤딩 도입으로 시스템 성능 유지.
   - **데이터 관리 용이성**: 일관된 데이터 구조로 인해 데이터 관리가 쉬워짐.

-----------------

[설계]
프롬프트
개선방향을 바탕으로 Azure에서 제공하는 DB 아키텍처와 상품관리DB를 설계를 하려고 한다. 
아키텍처 관점으로 설치해야 할 솔루션과 선정이유, 고가용성/안정성 측면으로 설계 내용을 정리해줘. 
그 아키텍처 기반으로 DB 개발 관점에서 DB모델러와 DBA가 충분히 이해할 수 있도록 설계목록과 내용 작성해줘.
상품관리에 필요한 엔터티/주요컬럼/관계도를 설계해서 정리해주고, 비즈니스 유연성 관점에서 설계 반영한 부분 알려줘.
마지막에는 검증 순서에 맞춰 테스트 시나리오를 작성해주되, 시나리오별 데이터 처리흐름 순서에 맞게 정리해줘.

------------------
### MS Azure 기반의 DB 아키텍처 설계

#### 설치해야 할 솔루션과 선정 이유
1. **Azure SQL Database**:
   - **선정 이유**: 고가용성과 자동 백업, 복구 기능을 제공하며, 자동 스케일링을 통해 성능을 최적화할 수 있습니다¹.
   - **주요 설정 내용**: 고가용성 설정(프리미엄 서비스 티어), 자동 백업 주기 설정, 읽기 복제본 구성.

2. **Azure Cosmos DB**:
   - **선정 이유**: 글로벌 분산 데이터베이스로, 다중 지역 복제 및 자동 장애 조치를 통해 높은 가용성을 보장합니다².
   - **주요 설정 내용**: 다중 지역 복제 설정, 파티션 키 설정, 인덱싱 정책 설정.

3. **Azure Database for PostgreSQL**:
   - **선정 이유**: 고가용성 및 자동 백업, 복구 기능을 제공하며, 읽기 복제본을 통해 읽기 성능을 향상시킬 수 있습니다³.
   - **주요 설정 내용**: 고가용성 설정, 자동 백업 주기 설정, 읽기 복제본 구성.

4. **Azure Service Bus**:
   - **선정 이유**: 메시지 브로커로서 마이크로서비스 간의 비동기 통신을 지원하며, 메시지의 신뢰성과 내구성을 보장합니다⁴.
   - **주요 설정 내용**: 네임스페이스 생성, 큐 및 토픽 설정, 메시지 라우팅 규칙 설정.

5. **Azure Monitor**:
   - **선정 이유**: 애플리케이션 및 인프라 모니터링을 통해 성능 및 상태를 실시간으로 파악할 수 있습니다.
   - **주요 설정 내용**: 로그 분석, 경고 규칙 설정, 대시보드 구성.

### 고가용성/안정성 측면의 설계 내용
1. **고가용성**:
   - **Azure SQL Database**: 읽기 복제본을 통해 읽기 성능을 분산시키고, 자동 장애 조치를 설정하여 가용성을 높임.
   - **Azure Cosmos DB**: 다중 지역 복제를 통해 데이터의 가용성을 보장하고, 자동 장애 조치를 설정.
   - **Azure Database for PostgreSQL**: 읽기 복제본을 통해 읽기 성능을 분산시키고, 고가용성 설정을 통해 장애 발생 시 자동 복구.

2. **안정성**:
   - **Azure SQL Database**: 자동 백업 및 복구 기능을 통해 데이터 손실을 최소화.
   - **Azure Cosmos DB**: 파티션 키 설정을 통해 데이터 분산 및 성능 최적화.
   - **Azure Database for PostgreSQL**: 자동 백업 및 복구 기능을 통해 데이터 손실을 최소화.

### DB 개발 관점에서의 설계 내역
1. **데이터 모델링**:
   - **정규화**: 데이터 중복을 최소화하고 일관성을 유지하기 위해 3차 정규화 적용.
   - **파티셔닝**: 데이터 증가에 대비하여 파티션 키를 설정하여 수평적 확장 지원.
   - **인덱싱**: 자주 사용되는 쿼리에 맞춘 인덱스 설계로 성능 최적화.

2. **DB 스키마 설계**:
   - **테이블 구조**: 각 마이크로서비스별로 독립적인 테이블을 설계하여 결합도를 낮춤.
   - **관계 설정**: 외래 키를 통해 테이블 간의 관계를 명확히 정의.
   - **트랜잭션 관리**: ACID 속성을 유지하기 위해 트랜잭션 범위를 설정.

3. **DBA 작업**:
   - **백업 및 복구**: 정기적인 백업 스케줄 설정 및 복구 절차 문서화.
   - **모니터링**: 성능 모니터링 도구를 사용하여 쿼리 성능 및 리소스 사용량 분석.
   - **보안 설정**: 데이터베이스 접근 권한 관리 및 암호화 설정.


### 테이블 설계

1. **상품 테이블 (Products)**
   - **컬럼**: 상품ID, 상품명, 카테고리, 가격, 재고수량, 등록일자
   - **모델링 사유**: 상품의 기본 정보를 저장하며, 각 상품을 고유하게 식별할 수 있도록 상품ID를 기본 키로 설정합니다. 카테고리와 가격 등의 정보는 상품 검색 및 필터링에 유용합니다.

2. **카테고리 테이블 (Categories)**
   - **컬럼**: 카테고리ID, 카테고리명, 상위카테고리ID
   - **모델링 사유**: 상품의 카테고리 정보를 관리하며, 상위 카테고리와의 관계를 통해 계층 구조를 표현합니다. 이는 카테고리별 상품 조회 시 유용합니다.

3. **재고 테이블 (Inventory)**
   - **컬럼**: 재고ID, 상품ID, 창고ID, 수량, 입고일자
   - **모델링 사유**: 각 상품의 재고 정보를 관리하며, 창고별 재고 수량을 추적할 수 있습니다. 상품ID를 외래 키로 설정하여 상품 테이블과의 관계를 유지합니다.

### 인덱스 설계

1. **상품 테이블 인덱스**
   - **인덱스**: 상품명 인덱스, 카테고리 인덱스
   - **모델링 사유**: 상품명과 카테고리로 자주 검색되는 경우 인덱스를 설정하여 검색 성능을 향상시킵니다.

2. **재고 테이블 인덱스**
   - **인덱스**: 상품ID 인덱스, 창고ID 인덱스
   - **모델링 사유**: 상품별 및 창고별 재고 조회 시 성능을 최적화하기 위해 인덱스를 설정합니다.

### 파티션 설계

1. **상품 테이블 파티션**
   - **파티션 기준**: 등록일자
   - **모델링 사유**: 등록일자를 기준으로 파티션을 나누어 데이터의 삽입 및 조회 성능을 최적화합니다. 예를 들어, 월별로 파티션을 나누면 최근 데이터에 대한 접근 속도가 빨라집니다.

2. **재고 테이블 파티션**
   - **파티션 기준**: 입고일자
   - **모델링 사유**: 입고일자를 기준으로 파티션을 나누어 재고 데이터의 관리 및 조회 성능을 향상시킵니다.

### 비즈니스 유연성 관점에서 설계 반영한 부분
- **Azure SQL Database**: 스케일링 옵션을 통해 비즈니스 요구사항 변화에 유연하게 대응.
- **Azure Cosmos DB**: 다중 모델 데이터베이스로 다양한 데이터 형식을 지원하여 유연성 제공.
- **Azure Database for PostgreSQL**: 오픈 소스 데이터베이스로 다양한 확장 기능을 통해 유연성 제공.

### 검증 순서에 맞춘 테스트 시나리오
1. **기본 기능 테스트**:
   - **시나리오**: 각 마이크로서비스의 기본 CRUD(Create, Read, Update, Delete) 기능 테스트.
   - **데이터 처리 흐름**: 클라이언트 요청 → API 게이트웨이 → 해당 마이크로서비스 → 데이터베이스 → 응답 반환.

2. **성능 테스트**:
   - **시나리오**: 대량의 데이터 처리 시 성능 및 응답 시간 측정.
   - **데이터 처리 흐름**: 클라이언트 요청 → API 게이트웨이 → 해당 마이크로서비스 → 데이터베이스 → 응답 반환.

3. **장애 복구 테스트**:
   - **시나리오**: 특정 마이크로서비스 장애 발생 시 시스템의 복구 능력 테스트.
   - **데이터 처리 흐름**: 클라이언트 요청 → API 게이트웨이 → 장애 발생 → 대체 경로 설정 → 데이터베이스 → 응답 반환.

4. **보안 테스트**:
   - **시나리오**: 인증 및 권한 관리 기능 테스트.
   - **데이터 처리 흐름**: 클라이언트 요청 → API 게이트웨이 → 인증 및 권한 확인 → 해당 마이크로서비스 → 데이터베이스 → 응답 반환.

